name: Test Suite

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.19, 1.20, 1.21]

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: |
        go mod download
        go mod verify

    - name: Run gofmt
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files need formatting:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run go vet
      run: go vet ./...

    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2

    - name: Run golangci-lint
      run: $(go env GOPATH)/bin/golangci-lint run --timeout=5m

    - name: Run unit tests
      run: |
        go test -short -race -coverprofile=coverage.unit.out -covermode=atomic ./...

    - name: Run integration tests
      run: |
        go test -run "TestSCDBDownloader|TestMock" -coverprofile=coverage.integration.out -covermode=atomic ./...

    - name: Run E2E tests
      run: |
        go test -run "TestE2E" -coverprofile=coverage.e2e.out -covermode=atomic ./...

    - name: Combine coverage reports
      run: |
        echo "mode: atomic" > coverage.out
        tail -n +2 coverage.unit.out >> coverage.out
        tail -n +2 coverage.integration.out >> coverage.out  
        tail -n +2 coverage.e2e.out >> coverage.out

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

    - name: Build binary
      run: |
        go build -v -ldflags="-w -s" -o ./bin/scdb-downloader .

    - name: Test binary creation
      run: |
        if [ ! -f "./bin/scdb-downloader" ]; then
          echo "Binary was not created"
          exit 1
        fi
        echo "Binary created successfully"
        ls -la ./bin/scdb-downloader

  build-cross-platform:
    name: Cross-platform Build
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21

    - name: Build for multiple platforms
      run: |
        mkdir -p ./bin
        
        # Linux
        GOOS=linux GOARCH=amd64 go build -ldflags="-w -s" -o ./bin/scdb-downloader-linux-amd64 .
        
        # macOS
        GOOS=darwin GOARCH=amd64 go build -ldflags="-w -s" -o ./bin/scdb-downloader-darwin-amd64 .
        GOOS=darwin GOARCH=arm64 go build -ldflags="-w -s" -o ./bin/scdb-downloader-darwin-arm64 .
        
        # Windows
        GOOS=windows GOARCH=amd64 go build -ldflags="-w -s" -o ./bin/scdb-downloader-windows-amd64.exe .

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries
        path: ./bin/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: '-fmt sarif -out gosec.sarif ./...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: gosec.sarif

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.21

    - name: Run Nancy vulnerability check
      run: |
        go install github.com/sonatypecommunity/nancy@latest
        go list -json -deps ./... | nancy sleuth

    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test, security-scan, dependency-check]
    
    steps:
    - name: Quality Gate Status
      run: |
        echo "✅ All tests passed"
        echo "✅ Security scan completed"  
        echo "✅ Dependency check completed"
        echo "✅ Quality gate: PASSED"